plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'
    ndkVersion '23.0.7599858'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 31
        consumerProguardFiles 'consumer-rules.pro'
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-19',
                        '-DANDROID_ARM_NEON=TRUE'
                cppFlags '-std=c++17 -frtti -fexceptions'
            }
        }
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
            version '3.18.1'
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'androidx.collection:collection:1.1.0'
    implementation 'org.jetbrains:annotations:22.0.0'
}

subprojects {
    id 'java'

    ext.'signing.keyId' = System.getenv('SIGNING_KEY_ID')
    ext.'signing.password' = System.getenv('SIGNING_PASSWORD')
    ext.'signing.secretKeyRingFile' = "D:\\Keys\\secring.gpg"

    ext.'ossrhUsername' = System.getenv('OSSRH_USERNAME')
    ext.'ossrhPassword' = System.getenv('OSSRH_PASSWORD')

    jar {
        dependsOn 'generatePomFileForMavenJavaPublication'
        into("META-INF/maven/$project.group/$project.archivesBaseName") {
            from new File(project.buildDir, 'publications/mavenJava')
            rename ".*", "pom.xml"

        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact sourcesJar
                artifact javadocJar
                artifact "$buildDir/outputs/aar/AhmerPdfium-release.aar"
                groupId groupId
                artifactId artifactPdfium
                version android.defaultConfig.versionName

                pom {
                    name = artifactPdfium
                    description = descriptionPdfium
                    url = url
                    licenses {
                        license {
                            name = licenseName
                            url = licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id = developerID
                            name = developerName
                            email = developerEmail
                        }
                    }
                    scm {
                        url = 'https://github.com/AhmerAfzal1/AhmerPDF/tree/master/AhmerPdfium'
                        connection = scmUrl
                        developerConnection = scmSshUrl
                    }
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = 'maven'
                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
        sign configurations.archives
    }
}